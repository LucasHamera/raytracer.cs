@page "/"
@using global::RayTracer.Blazor.Models
@using Raytracer.Geometry.Scenes
@using Raytracer.Canvas
@using System.Diagnostics
@using global::RayTracer.Blazor.CanvasConverter
@using Raytracer

<h1>Ray Tracer in Blazor!</h1>

<EditForm Model="@_renderOptions" OnValidSubmit="Render">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <select @bind="@Version">
            <option value="@BaseVersion">@BaseVersion</option>
            <option value="@ParallelVersion">@ParallelVersion</option>
        </select>
    </p>

    <p>
        <label>
            Width:
            <InputNumber @bind-Value="_renderOptions.Width" />
        </label>
    </p>

    <p>
        <label>
            Height:
            <InputNumber @bind-Value="_renderOptions.Height" />
        </label>
    </p>

    <button type="submit">Generate</button>
</EditForm>

<br />
@if (!string.IsNullOrWhiteSpace(Image))
{
    <img src="@Image" alt="render" width="512" height="512"/>

    <br />
    <p>
        <label>
            Render time: @RenderTimeMs [ms]
        </label>
    </p>
}

@code {
    private readonly RenderOptions _renderOptions = new RenderOptions();

    private string Image { get; set; }
    private long RenderTimeMs { get; set; } = 0;

    private const string BaseVersion = "Base";
    private const string ParallelVersion = "Parallel";
    private string Version { get; set; } = BaseVersion;

    private void Render()
    {
        var width = _renderOptions.Width;
        var height = _renderOptions.Height;
        var scene = new MyScene();

        var st = Stopwatch.StartNew();
        var canvas = Version.Equals(BaseVersion) 
            ? BaseRender(scene, width, height) : ParallelRender(scene, width, height);
        RenderTimeMs = st.ElapsedMilliseconds;

        var canvasBase64 = CanvasToBase64Converter.Convert(canvas);
        Image = $"data:image/png;base64, {canvasBase64}";
    }

    private Canvas BaseRender(MyScene scene, int width, int height)
    {
        var rayTracer = new BaseRayTracer(
            height,
            width
        );

        return rayTracer.Render(scene);
    }

    private Canvas ParallelRender(MyScene scene, int width, int height)
    {
        var rayTracer = new ParallelRayTracer(
            height,
            width
        );

        return rayTracer.Render(scene);
    }
}